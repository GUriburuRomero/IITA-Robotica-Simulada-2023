matriz = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
          [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0],
          [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0],
          [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0],
          [0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0],
          [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
          [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
          [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
          [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0],
          [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0],
          [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]


def delete_row(matriz_procesar):
    ''' Quita las filas que contengan valores innecesarios '''
    columnas = len(matriz_procesar[0])
    # filas = len(matriz_procesar)
    # print(filas, columnas)
    
    column_reference = [0]*columnas
    print("El vector de referencia es:", column_reference)
    
    result = [elem for elem in matriz_procesar if elem != column_reference]
    return result

def transposed_matrix(matriz_procesar):
    ''' Crea una matriz transpuesta correspondiente al par√°metro '''
    columnas = len(matriz_procesar[0])
    filas = len(matriz_procesar)

    f = 0
    c = 0

    aux = []
    final = []
    while c < columnas:
        for i in range(filas):
            aux.append(matriz_procesar[i][c])
        c = c+1
        final.append(aux)
        aux = []

    return final

# a = delete_row(matriz)

# b = transposed_matrix(a)

# c = delete_row(b)

# d = transposed_matrix(c)

# for i in d:
#     print(i)


import numpy as np

# ar = np.array(matriz)
# print(ar)

# print(type(ar[1][0]))


# ar = np.ndarray.tolist(ar)
# print(type(ar[1][0]))

# for i in range(1):
#     print(type(ar[i][2]))

# ar1 = delete_row(ar1)

# ar1 = transposed_matrix(ar1)
# ar1 = delete_row(ar1)
# ar1 = transposed_matrix(ar1)

# ar1 = np.array(ar1)
# print(ar1)

matri2 = [['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
          ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
          ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
          ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
          ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
          ['0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0'],
          ['0', '1', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '1', '0'],
          ['0', '1', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '1', '0'],
          ['0', '1', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '1', '0'],
          ['0', '1', '1', '1', '1', '0', '0', '0', '0', '1', '0', '0', '0', '0', '1', '0'],
          ['0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0'],
          ['0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0'],
          ['0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0'],
          ['0', '1', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '1', '0'],
          ['0', '1', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '1', '0'],
          ['0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0'],
          ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
          ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
          ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
          ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
          ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0']]


def stringMatriz(matriz):
    mataux3 = []

    for fila in matriz:
        aux = []
        for elemento in fila:
            a = int(elemento)
            aux.append(a)
        mataux3.append(aux)

    for i in mataux3:
        print(i)
    
    return mataux3

# stringMatriz(matri2)

matri3 = [['0000000000000000'],
          ['0000000000000000'],
          ['0000000000000000'],
          ['0000000000000000'],
          ['0000000000000000'],
          ['0111111111111110'],
          ['0100000001000010'],
          ['0100000001000010'],
          ['0100000001000010'],
          ['0111100001000010'],
          ['0100000000000010'],
          ['0100000000000010'],
          ['0100000000000010'],
          ['0100000100000010'],
          ['0100000100000010'],
          ['0111111111111110'],
          ['0000000000000000'],
          ['0000000000000000'],
          ['0000000000000000'],
          ['0000000000000000'],
          ['0000000000000000']]

def stringListMatrix(matriz):

    mataux4 = []

    for fila in matriz:
        aux = []
        for elemento in fila:
            for microelementos in elemento:
                aux.append(int(microelementos))
        mataux4.append(aux)

    return mataux4

# v = stringListMatrix(matri3)

# a = [['0' '0' '0'], 
#      ['1' '1' '1']]

# b = []

# for fila in a:
#     aux = []
#     f = fila[0].split()

#     for elemento in f:
#         s = str(elemento)
#         s.split()

#     # print(s)
#     for elem in s:
#         aux.append(int(elem))
    
#     b.append(aux)

# print(b)
